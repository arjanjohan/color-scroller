{
  "address": "0xb4e9A5BC64DC07f890367F72941403EEd7faDCbB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newValue",
          "type": "uint8"
        }
      ],
      "name": "BumpIncremented",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bumpValues",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getBumpValue",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementBump",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c8e5c9e57a9d3cf4065062f37c53bc5e11535bc60ed79a466dd730108de5c73",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xb4e9A5BC64DC07f890367F72941403EEd7faDCbB",
    "transactionIndex": 0,
    "gasUsed": "164521",
    "logsBloom": "0x
    "blockHash": "0x397e6aad6b677b6202a50247c9e2b396d66f2de2c41c481219233a01d77ec710",
    "transactionHash": "0x7c8e5c9e57a9d3cf4065062f37c53bc5e11535bc60ed79a466dd730108de5c73",
    "logs": [],
    "blockNumber": 6736648,
    "cumulativeGasUsed": "164521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "90a15eddfb593eceb293e8a4923c8e76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"BumpIncremented\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bumpValues\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBumpValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementBump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBumpValue(address)\":{\"params\":{\"_address\":\"The address to check the bump value for\"},\"returns\":{\"_0\":\"The bump value for the given address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBumpValue(address)\":{\"notice\":\"Function to get the bump value for a specific address\"},\"incrementBump()\":{\"notice\":\"Function to increment the bump value for the caller's address Resets to 0 if the maximum value is reached\"}},\"notice\":\"A smart contract that allows users to view and increment their bump value\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BumpContract.sol\":\"BumpContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BumpContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * A smart contract that allows users to view and increment their bump value\\n */\\ncontract BumpContract {\\n    // Mapping to store bump values for each address\\n    mapping(address => uint8) public bumpValues;\\n\\n    // Event to emit when a bump value is incremented\\n    event BumpIncremented(address indexed user, uint8 newValue);\\n\\n    /**\\n     * Function to get the bump value for a specific address\\n     * @param _address The address to check the bump value for\\n     * @return The bump value for the given address\\n     */\\n    function getBumpValue(address _address) public view returns (uint8) {\\n        return bumpValues[_address];\\n    }\\n\\n    /**\\n     * Function to increment the bump value for the caller's address\\n     * Resets to 0 if the maximum value is reached\\n     */\\n    function incrementBump() public {\\n        if (bumpValues[msg.sender] == type(uint8).max) {\\n            bumpValues[msg.sender] = 0;\\n        } else {\\n            bumpValues[msg.sender] += 1;\\n        }\\n        emit BumpIncremented(msg.sender, bumpValues[msg.sender]);\\n    }\\n}\\n\",\"keccak256\":\"0xa4991dccf3e1c1e91845da420a12078a57b8e801bb7306fc3edfc28e68c29677\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610203806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806341f09e2e14610046578063d4f4ac8e1461007f578063f0229108146100ab575b600080fd5b610069610054366004610170565b60006020819052908152604090205460ff1681565b60405160ff909116815260200160405180910390f35b61006961008d366004610170565b6001600160a01b031660009081526020819052604090205460ff1690565b6100b36100b5565b005b3360009081526020819052604090205460ff1660fe19016100ec57336000908152602081905260409020805460ff19169055610128565b33600090815260208190526040812080546001929061010f90849060ff166101a0565b92506101000a81548160ff021916908360ff1602179055505b336000818152602081815260409182902054915160ff90921682527f5dc6b1941d3828e832fad0ea7e926e49e1fe1e0fad78988295047c79a1b86abf910160405180910390a2565b60006020828403121561018257600080fd5b81356001600160a01b038116811461019957600080fd5b9392505050565b60ff81811683821601908111156101c757634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122095ae6f4269ee792b373dc48606c8d663913c6eb64e566befa6dfb2b90a49299664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806341f09e2e14610046578063d4f4ac8e1461007f578063f0229108146100ab575b600080fd5b610069610054366004610170565b60006020819052908152604090205460ff1681565b60405160ff909116815260200160405180910390f35b61006961008d366004610170565b6001600160a01b031660009081526020819052604090205460ff1690565b6100b36100b5565b005b3360009081526020819052604090205460ff1660fe19016100ec57336000908152602081905260409020805460ff19169055610128565b33600090815260208190526040812080546001929061010f90849060ff166101a0565b92506101000a81548160ff021916908360ff1602179055505b336000818152602081815260409182902054915160ff90921682527f5dc6b1941d3828e832fad0ea7e926e49e1fe1e0fad78988295047c79a1b86abf910160405180910390a2565b60006020828403121561018257600080fd5b81356001600160a01b038116811461019957600080fd5b9392505050565b60ff81811683821601908111156101c757634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122095ae6f4269ee792b373dc48606c8d663913c6eb64e566befa6dfb2b90a49299664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBumpValue(address)": {
        "params": {
          "_address": "The address to check the bump value for"
        },
        "returns": {
          "_0": "The bump value for the given address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBumpValue(address)": {
        "notice": "Function to get the bump value for a specific address"
      },
      "incrementBump()": {
        "notice": "Function to increment the bump value for the caller's address Resets to 0 if the maximum value is reached"
      }
    },
    "notice": "A smart contract that allows users to view and increment their bump value",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/BumpContract.sol:BumpContract",
        "label": "bumpValues",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}